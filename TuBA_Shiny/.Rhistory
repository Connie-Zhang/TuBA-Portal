column(3,selectInput(
inputId = "pathsig",
label = "Filter by significance of biological pathway:",
choices = c("No"=20,"0.05 significance"=0.05,"0.10 significance"=0.10),
selected = "No"
)),
column(3, selectizeInput(
inputId = "gene",
label = "Gene of interest",
choices = c(unique(up_data_list[["BLCA"]] %>% pull(Gene.ID))),
selected = NULL,
multiple = TRUE)),
column(3, selectizeInput(
inputId = "path",
label = "Biological Pathway of interest",
choices = c(unique(up_BP_full[["BLCA"]] %>% pull(GO_term))),
selected = NULL,
multiple = TRUE)),
# change bic input choices to dynamic
column(3,selectInput(
inputId = "bic",
label = "Select the bicluster of interest:",
choices = unique(up_BP_full[["BLCA"]] %>% pull(bic)),
selected = 1)),
column(3,selectInput(
inputId = "sig",
label = "Filter by significance of survival analysis:",
choices = c("No"=20,"0.05 significance"=0.05,"0.10 significance"=0.10),
selected = "No"))),
sidebarPanel(
textOutput(outputId="bicinfo"),width = 3),
mainPanel(
tabsetPanel(
tabPanel("Visualization",plotOutput(outputId = "survivalvis"),textOutput(outputId="param"),width = 9),
tabPanel("Gene Information", dataTableOutput(outputId = "survivaltable"),textOutput(outputId = "bic_genes"),textOutput(outputId="bic_samples"),style = "height:500px; overflow-y: scroll;overflow-x: scroll;",width = 9)))),
tabItem("copynum",
useShinyjs(),
fluidRow(
column(2, selectInput(
inputId = "type_copy",
label = "Choose cancer of interest:",
selected = "BLCA",
choices = full_cancer_names)),
column(3, selectInput(
inputId = "reg_copy",
label = "Up or down regulated gene expression:",
selected="Up",
choices = c("Up","Down"))),
column(3,selectInput(
inputId = "num",
label = "Select the bicluster of interest:",
choices = unique(up_BP_full[["BLCA"]] %>% pull(bic)))),
column(3,selectInput(
inputId = "withcopy",
label = "Fill with copy number?",
choices = c("Yes","No"))),
column(3,selectizeInput(
inputId = "chrom",
label = "Select the chromosome of interest:",
selected = NULL,
choices = chrom,
multiple=TRUE
))),
sidebarPanel(
textOutput(outputId= "info"), width = 3),
mainPanel(
tabsetPanel(
tabPanel("Visualization",plotlyOutput(outputId = "mapvis"),textOutput(outputId="param2"),width = 9),
tabPanel("Gene Information",dataTableOutput(outputId = "table"),textOutput(outputId="bic_genes2"),textOutput(outputId="bic_samples2"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;",width = 9)))),
tabItem("about",includeMarkdown("about.md")))))
# Define server logic required to draw a histogram
server <- function(input, output,session) {
toListen <- reactive({
list(input$reg,input$type,input$variable,input$sig,input$gene,input$path,input$pathsig)
})
observeEvent(toListen(),{
filtered_bics <- full_data_list[[input$reg]][input$type_copy][[1]] %>% filter(Samples.In.Bicluster > 20)
filtered_bics <- filtered_bics$Bicluster.No
if(!is.null(input$type)){
dat_filtered <- full_data_list[[input$reg]][input$type_copy][[1]] %>% filter(Samples.In.Bicluster > 20)
updateSelectInput(session,"bic", choices = dat_filtered$Bicluster.No)}
pval_filtered <- intersect(full_pval_list[[input$reg]][[input$type]] %>% filter((!!sym(input$variable))<input$sig) %>% pull(bic), filtered_bics)
if(is.null(input$path)){
path_filtered <- NULL
}
else{
path_filtered <- intersect(full_BP_list[[input$reg]][[input$type]] %>% filter(GO_term==input$path) %>% filter(as.numeric(p_val) < as.numeric(input$pathsig)) %>% pull(bic), filtered_bics)}
if(is.null(input$gene)){
gene_filtered <- NULL
}
else {
gene_filtered <- intersect(full_data_list[[input$reg]][[input$type]] %>% filter(Gene.ID %in% input$gene) %>% count(Bicluster.No) %>% filter(n==length(input$gene)) %>% pull(Bicluster.No), filtered_bics)}
if (length(gene_filtered)==0){gene_filtered <- NULL}
if(length(path_filtered)==0){path_filtered <- NULL}
if(length(pval_filtered)==0){pval_filtered <- NULL}
mylist <- list(pval_filtered,path_filtered,gene_filtered)
updated_bic <- Reduce(intersect,mylist[vapply(mylist, Negate(is.null),NA)])
if(length(updated_bic)!=0){
updated <- intersect(updated_bic,filtered_bics)
updateSelectInput(session,"bic",choices=updated)}
else if (length(updated_bic)==0){
updateSelectInput(session,"bic",choices = NULL)}
if(is.null(input$gene)&is.null(input$path)&is.null(input$sig)&is.null(input$pathsig)){
updateSelectInput(session,"bic",choices=intersect(full_data_list[[input$reg]][[input$type]] %>% pull(Bicluster.No),filtered_bics))
}
})
output$survivalvis <- renderPlot({
samples <- colnames(full_cancer_list[[input$reg]][[input$type]][[as.integer(input$bic)]][[3]])[-1]
samples <- str_replace_all(samples,"\\.","-")
survival <- survival_data_list[[input$type]]
biclist <- survival %>% mutate(bicluster = as.factor(ifelse(sample %in% samples,1,0)))
form <- as.formula(paste0("Surv(",input$variable,".time,",input$variable,")~bicluster"))
km_fit <- survfit(form, data=biclist)
# fortify(km_fit)
ggplot2::autoplot(km_fit) +
labs(x = "\n Survival Time (Days) ", y = "Survival Probabilities \n",
title = paste0(variable_names[[input$variable]]," of \n Cancer Patients \n"), colour = "Samples") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="#FF7A33", size = 12),
axis.title.y = element_text(face="bold", colour="#FF7A33", size = 12),
legend.title = element_text(face="bold", size = 10),
panel.background = element_rect(fill="white"),
panel.grid = element_line(colour="grey", size = 0.25)) +
guides(fill=FALSE) +
scale_color_manual(labels = c("not in bicluster", "in bicluster"), values = c(2,1))
})
output$param <- renderText({
paste0("The TuBA parameters used the ",as.character(TuBA_params[[input$reg]][[input$type]][1])," percentile cutoff and Jaccard index of ",as.character(TuBA_params[[input$reg]][[input$type]][2]))
})
output$survivaltable <- renderDataTable({
datatable(full_cancer_list[[input$reg]][[input$type]][[as.integer(input$bic)]][[1]]%>% select(Gene.ID,chrom),options = list(paging=FALSE))
})
output$bicinfo <- renderText({
dat <- full_cancer_list[[input$reg]][[input$type]][[as.integer(input$bic)]][[3]]
samples <- colnames(dat)[-1]
samples <- str_replace_all(samples,"\\.","-")
survival <- survival_data_list[[input$type]]
biclist <- survival %>% mutate(bicluster = as.factor(ifelse(sample %in% samples,1,0)))
form <- as.formula(paste0("Surv(",input$variable,".time,",input$variable,")~bicluster"))
km_fit <- surv_fit(form, data=biclist)
print(paste0("This bicluster contains: \n ",toString(nrow(full_cancer_list[[input$reg]][[input$type]][[as.integer(input$bic)]][[1]]))," genes, \n ",toString(unique(full_cancer_list[[input$reg]][input$type][[1]][[as.integer(input$bic)]][[1]]$Samples.In.Bicluster))," samples. \n","The KM-analysis outputs a p-value of ",round(surv_pvalue(km_fit,data=biclist)$pval,3)))
})
output$bic_genes <- renderText({
paste0('\"',paste(full_cancer_list[[input$reg]][input$type][[1]][[as.integer(input$bic)]][[1]]%>% pull(Gene.ID),collapse='","'),'\"')
})
output$bic_samples <- renderText({
dat <- full_cancer_list[[input$reg]][[input$type]][[as.integer(input$bic)]][[3]]
samples <- colnames(dat)[-1]
paste0('\"',paste(samples,collapse='","'),'\"')
})
observeEvent(input$reg_copy,
observeEvent(input$type_copy,
if(!is.null(input$type_copy)){
dat_filtered <- full_data_list[[input$reg_copy]][input$type_copy][[1]] %>% filter(Samples.In.Bicluster > 20)
updateSelectInput(session,"num", choices = dat_filtered$Bicluster.No)
hbic_chrom_list <- list()
for (i in unique(dat_filtered$Bicluster.No)){
new <- full_cancer_list[[input$reg_copy]][input$type_copy][[1]][[i]][[2]]
bic_chrom <- new$prop
names(bic_chrom) <- new$chrom
hbic_chrom_list <- list.append(hbic_chrom_list,names(which(bic_chrom>0.8)))
}
names(hbic_chrom_list) <- unique(dat_filtered$Bicluster.No)
observeEvent(input$chrom,
if (is.null(input$chrom)){
updateSelectInput(session,"num",choices = dat_filtered$Bicluster.No)
}
else {
updateSelectInput(session,"num",choices = names(which(hbic_chrom_list==input$chrom)))})
observeEvent(input$withcopy,
if (input$withcopy=="No"){
output$mapvis <- renderPlotly({
dat <- full_cancer_list[[input$reg_copy]][input$type_copy][[1]][[as.integer(input$num)]][[2]]
ggplotly(dat %>% ggplot(aes(x=chrom,y=prop,fill="#46ACC8"))+geom_bar(stat='identity')+
labs(title = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), panel.background = element_rect(fill = "white",colour = "white",size = 0.5, linetype = "solid"), panel.grid.major = element_line(size = 0.5, linetype = 'solid',colour = "light grey"), panel.grid.minor = element_line(size = 0.25, linetype = 'solid',colour = "light grey"),legend.position = "none",plot.title = element_text(size=10)) +
coord_cartesian(ylim=c(0,NA)) +
xlab("Chromosome") +
ylab("Percentage") +
scale_y_continuous(labels=scales::percent_format()),tooltip="text")})}
else{
output$mapvis <- renderPlotly({
foo <- full_foo_list[[input$reg_copy]][input$type_copy][[1]][[as.integer(input$num)]]
ggplotly(foo %>% ggplot(aes(x=chrom,fill=copynumber))+geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1), panel.background = element_rect(fill = "white",colour = "white",size = 0.5, linetype = "solid"), panel.grid.major = element_line(size = 0.5, linetype = 'solid',colour = "light grey"), panel.grid.minor = element_line(size = 0.25, linetype = 'solid',colour = "light grey"),plot.title = element_text(size=10)) +
coord_cartesian(ylim=c(0,NA)) +
xlab("Chromosome") + scale_y_continuous(labels = function(x) x/10)+
ylab("Percentage")+ scale_fill_manual(values = myColors),tooltip="text")})})
output$info <- renderText({
# biclist <- full_cancer_list[[input$reg_copy]][input$type_copy][[1]][[as.integer(input$num)]][[1]]
# print(paste0("This bicluster contains: \n ",toString(nrow(biclist))," genes, \n ",toString(biclist$Samples.In.Bicluster[1])," samples."))
dat <- full_cancer_list[[input$reg_copy]][[input$type_copy]][[as.integer(input$num)]][[3]]
samples <- colnames(dat)[-1]
samples <- str_replace_all(samples,"\\.","-")
survival <- survival_data_list[[input$type_copy]]
biclist <- survival %>% mutate(bicluster = as.factor(ifelse(sample %in% samples,1,0)))
form <- as.formula(paste0("Surv(",input$variable,".time,",input$variable,")~bicluster"))
km_fit <- surv_fit(form, data=biclist)
print(paste0("This bicluster contains: \n ",toString(nrow(full_cancer_list[[input$reg_copy]][[input$type_copy]][[as.integer(input$num)]][[1]]))," genes, \n ",toString(unique(full_cancer_list[[input$reg_copy]][input$type_copy][[1]][[as.integer(input$num)]][[1]]$Samples.In.Bicluster))," samples. \n","The KM-analysis outputs a p-value of ",round(surv_pvalue(km_fit,data=biclist)$pval,3)))
})
output$param2 <- renderText({
paste0("The TuBA parameters used the ",as.character(TuBA_params[[input$reg_copy]][[input$type_copy]][1])," percentile cutoff and Jaccard index of ",as.character(TuBA_params[[input$reg_copy]][[input$type_copy]][2]))
})
output$table <- renderDataTable({
biclist <- full_cancer_list[[input$reg_copy]][input$type_copy][[1]][[as.integer(input$num)]][[1]]
datatable(right_join(locus_dat,biclist %>% select(Gene.ID,chrom),by=c("symbol"="Gene.ID")),options = list(paging=FALSE))
})
output$bic_genes2 <- renderText({
paste0('\"',paste(full_cancer_list[[input$reg_copy]][input$type][[1]][[as.integer(input$bic)]][[1]]%>% pull(Gene.ID),collapse='","'),'\"')
})
output$bic_samples2 <- renderText({
dat <- full_cancer_list[[input$reg_copy]][[input$type_copy]][[as.integer(input$bic)]][[3]]
samples <- colnames(dat)[-1]
paste0('\"',paste(samples,collapse='","'),'\"')
})
}))}
# Run the application
shinyApp(ui = ui, server = server)
copy_results <- list()
for(z in c("Up","Down")){
chrom_tb <- tibble()
for(i in cancer_names){
v1 <- c()
for(j in chrom){
v1 <- c(v1,chrom_count(z,i,j))
}
chrom_tb <- rbind(chrom_tb,v1)
}
colnames(chrom_tb) <- chrom
rownames(chrom_tb) <- cancer_names
copy_results[[z]] <- chrom_tb
}
copy_results[["Up"]]
# Run the application
shinyApp(ui = ui, server = server)
chrom_count("Up","BLCA","chr1")
full_data_list[["Up"]][["BLCA"]] %>% filter(Samples.In.Bicluster > 20) %>% pull(Bicluster.No))
full_data_list[["Up"]][["BLCA"]] %>% filter(Samples.In.Bicluster > 20) %>% pull(Bicluster.No)
unique(full_data_list[["Up"]][["BLCA"]] %>% filter(Samples.In.Bicluster > 20) %>% pull(Bicluster.No))
full_cancer_list[["Up"]][["BLCA"]][[76]][[2]]["chr1,"prop"]
full_cancer_list[["Up"]][["BLCA"]][[76]][[2]]["chr1","prop"]
bics <- unique(full_data_list[["Up"]][["BLCA"]] %>% filter(Samples.In.Bicluster > 20) %>% pull(Bicluster.No))
return(sum(sapply(bics,function(v) sum(full_cancer_list[["Up"]][["BLCA"]][[v]][[2]][chrom,"prop"]>0.8)),na.rm=TRUE))
return(sum(sapply(bics,function(v) sum(full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8)),na.rm=TRUE))
sum(sapply(bics,function(v) sum(full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8)),na.rm=TRUE)
sapply(bics,function(v) sum(full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8)),na.rm=TRUE
sapply(bics,function(v) sum(full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8)),na.rm=TRUE)
sapply(bics,function(v) sum(full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8))
# Run the application
shinyApp(ui = ui, server = server)
full_cancer_list[["Up"]][["BLCA"]][[115]][[2]]["chr1","prop"]
full_cancer_list[["Up"]][["BLCA"]][[115]][[2]]["chr1","prop"]>0.8
sapply(bics,function(v) sum(full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8,na.rm=TRUE))
sum(sapply(bics,function(v) sum(full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8,na.rm=TRUE)))
sapply(bics,function(v) sum(full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8,na.rm=TRUE))
sapply(bics,function(v) sum(full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8,na.rm=TRUE))[115]
sapply(bics,function(v) sum(full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8,na.rm=TRUE))
full_cancer_list[["Up"]][["BLCA"]][[115]][[2]]["chr1","prop"]>0.8
sum(full_cancer_list[["Up"]][["BLCA"]][[115]][[2]]["chr1","prop"]>0.8,na.rm=TRUE)
full_cancer_list[["Up"]][["BLCA"]][[115]][[2]]
sapply(bics,function(v) sum(full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8,na.rm=TRUE))
sapply(bics,function(v) full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8)
full_cancer_list[["Up"]][["BLCA"]][[115]][[2]]["chr1","prop"]>0.8
sapply(bics,function(v) full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8)
sapply(bics,function(v) full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8)[115]
sapply(bics,function(v) full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8)
bics
sapply(bics,function(v) full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8)[113]
# Run the application
shinyApp(ui = ui, server = server)
sapply(bics,function(v) full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8)
bics[sapply(bics,function(v) full_cancer_list[["Up"]][["BLCA"]][[v]][[2]]["chr1","prop"]>0.8)]
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]]["chr1","prop"]>0.8
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]]
full_data_list[["Up"]][["BLCA"]] %>% filter(Bicluster.No==54)
View(full_cancer_list[["Up"]][["BLCA"]][[2]])
View(full_cancer_list[["Up"]][["BLCA"]][[54]][[2]])
bic_chrom <- full_cancer_list[["Up"]][["BLCA"]][[54]][[2]]$prop
bic_chrom
names(bic_chrom) <- full_cancer_list[["Up"]][["BLCA"]][[54]][[2]]$chrom
bic_chrom
names(which(bic_chrom>0.8))
dat_filtered <- full_data_list[["Up"]]["BLCA"][[1]] %>% filter(Samples.In.Bicluster > 20)
hbic_chrom_list <- list()
for (i in unique(dat_filtered$Bicluster.No)){
new <- full_cancer_list[["Up"]]["BLCA"][[1]][[i]][[2]]
bic_chrom <- new$prop
names(bic_chrom) <- new$chrom
hbic_chrom_list <- list.append(hbic_chrom_list,names(which(bic_chrom>0.8)))
}
names(hbic_chrom_list) <- unique(dat_filtered$Bicluster.No)
hbic_chrom_list
hbic_chrom_list$`54`
names(which(hbic_chrom_list=="chr1"))
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]]
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]]["chr1","prop"]
rownames(full_cancer_list[["Up"]][["BLCA"]][[54]][[2]])
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]]["chr1",]
class(full_cancer_list[["Up"]][["BLCA"]][[54]][[2]])
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]]
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]]["chr6",]
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]]["chr1",]
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]]["chr19",]
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]]["chr17",]
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]]["chr1",]
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]]
rownames(full_cancer_list[["Up"]][["BLCA"]][[54]][[2]])
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]]
rownames(full_cancer_list[["Up"]][["BLCA"]][[54]][[2]])
class(rownames(full_cancer_list[["Up"]][["BLCA"]][[54]][[2]]))
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]]
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]] %>% filter(chrom=="chr1")
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]] %>% filter(chrom=="chr1") %>% pull(prop)
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]] %>% filter(chrom=="chr1") %>% pull(prop) >0.8
full_cancer_list[["Up"]][["BLCA"]][[54]][[2]] %>% filter(chrom=="chr19") %>% pull(prop) >0.8
chrom_count <- function(reg,cancer,chr){
bics <- unique(full_data_list[[reg]][[cancer]] %>% filter(Samples.In.Bicluster > 20) %>% pull(Bicluster.No))
return(sum(sapply(bics,function(v) sum(full_cancer_list[[reg]][[cancer]][[v]][[2]] %>% filter(chrom==chr) %>% pull(prop)>0.8)),na.rm=TRUE))
}
chrom_count("Up","BLCA","chr1")
chrom_count <- function(reg,cancer,chr){
bics <- unique(full_data_list[[reg]][[cancer]] %>% filter(Samples.In.Bicluster > 20) %>% pull(Bicluster.No))
return(sum(sapply(bics,function(v) sum(full_cancer_list[[reg]][[cancer]][[v]][[2]] %>% filter(chrom==chr) %>% pull(prop)>0.8)),na.rm=TRUE))
}
copy_results <- list()
for(z in c("Up","Down")){
chrom_tb <- tibble()
for(i in cancer_names){
v1 <- c()
for(j in chrom){
v1 <- c(v1,chrom_count(z,i,j))
}
chrom_tb <- rbind(chrom_tb,v1)
}
colnames(chrom_tb) <- chrom
rownames(chrom_tb) <- cancer_names
copy_results[[z]] <- chrom_tb
}
View(copy_results)
View(copy_results[['Up']])
for(z in c("Down")){
chrom_tb <- tibble()
for(i in cancer_names){
v1 <- c()
for(j in chrom){
v1 <- c(v1,chrom_count(z,i,j))
}
chrom_tb <- rbind(chrom_tb,v1)
}
colnames(chrom_tb) <- chrom
rownames(chrom_tb) <- cancer_names
copy_results[[z]] <- chrom_tb
}
View(copy_results[["Up"]])
View(copy_results[["Down"]])
# Run the application
shinyApp(ui = ui, server = server)
write.csv2(copy_results[["Up"]],file = "chrom_up.csv")
write.csv2(copy_results[["Down"]],file = "chrom_down.csv")
full_pval_list[["Up"]][["BLCA"]]
surv_count <- function(reg,cancer,var,cutoff){
bics <- unique(full_data_list[[reg]][[cancer]] %>% filter(Samples.In.Bicluster > 20) %>% pull(Bicluster.No))
return(sum(full_pval_list[[reg]][[cancer]]%>% filter(bic %in% bics) %>% pull(!!sym(var))<cutoff))
}
surv_count("Up","BLCA","OS",0.05)
# Run the application
shinyApp(ui = ui, server = server)
surv_95 <- list()
variables <- c("OS","DSS","DFI","PFI")
for (z in c("Up","Down")){
surv_tb <- tibble()
for (i in cancer_names){
v1 <- c()
for(j in variables){
v1 <- c(v1,surv_count(z,i,j,0.05))
}
surv_tb <- rbind(surv_tb,v1)
}
colnames(surv_tb) <- variables
rownames(surv_tb) <- cancer_names
surv_95[[z]] <- surv_tb
}
full_pval_list[["Up"]][["BLCA"]] %>% filter(bic %in% NULL)
full_pval_list[["Up"]][["BLCA"]] %>% filter(bic %in% NULL) %>% pull(OS)
full_pval_list[["Up"]][["BLCA"]] %>% filter(bic %in% NULL) %>% pull(OS)<0.05
full_pval_list[["Up"]][["BLCA"]]
View(surv_tb)
cancer_names[14]
surv_count("Up","LUSC","OS",0.05)
full_data_list[["Up"]][["LUSC"]]
full_data_list[["Up"]][["LUSC"]] %>% filter(Samples.In.Bicluster > 20) %>% pull(Bicluster.No))
full_data_list[["Up"]][["LUSC"]] %>% filter(Samples.In.Bicluster > 20) %>% pull(Bicluster.No)
unique(full_data_list[["Up"]][["LUSC"]] %>% filter(Samples.In.Bicluster > 20) %>% pull(Bicluster.No))
full_pval_list[["Up"]][["LUSC"]] %>% filter(bic %in% unique(full_data_list[["Up"]][["LUSC"]] %>% filter(Samples.In.Bicluster > 20) %>% pull(Bicluster.No)))
full_pval_list[["Up"]][["LUSC"]]
cancer_names[15]
for (i in cancer_names[15:22]){
v1 <- c()
for(j in variables){
v1 <- c(v1,surv_count(z,i,j,0.05))
}
surv_tb <- rbind(surv_tb,v1)
}
colnames(surv_tb) <- variables
rownames(surv_tb) <- cancer_names
rownames(surv_tb) <- cancer_names[1:13,15:22]
rownames(surv_tb) <- cancer_names[c(1:13,15:22)]
surv_95[["Up"]] <- surv_tb
for (z in c("Down")){
surv_tb <- tibble()
for (i in cancer_names){
v1 <- c()
for(j in variables){
v1 <- c(v1,surv_count(z,i,j,0.05))
}
surv_tb <- rbind(surv_tb,v1)
}
colnames(surv_tb) <- variables
rownames(surv_tb) <- cancer_names
surv_95[[z]] <- surv_tb
}
for (i in cancer_names[15:22]){
v1 <- c()
for(j in variables){
v1 <- c(v1,surv_count("Down",i,j,0.05))
}
surv_tb <- rbind(surv_tb,v1)
}
colnames(surv_tb) <- variables
rownames(surv_tb) <- cancer_names[c(1:13,15:22)]
surv_95[["Down"]] <- surv_tb
View(surv_95[["Up"]])
View(surv_95[["Down"]])
for (z in c("Up")){
surv_tb <- tibble()
for (i in cancer_names){
v1 <- c()
for(j in variables){
v1 <- c(v1,surv_count(z,i,j,0.05))
}
surv_tb <- rbind(surv_tb,v1)
}
colnames(surv_tb) <- variables
rownames(surv_tb) <- cancer_names
surv_95[[z]] <- surv_tb
}
for (i in cancer_names[15:22]){
v1 <- c()
for(j in variables){
v1 <- c(v1,surv_count("Up",i,j,0.05))
}
surv_tb <- rbind(surv_tb,v1)
}
colnames(surv_tb) <- variables
rownames(surv_tb) <- cancer_names[c(1:13,15:22)]
surv_95[["Up"]] <- surv_tb
write.csv2(surv_95[["Up"]],file="surv_up_95.csv")
write.csv2(surv_95[["Down"]],file="surv_down_95.csv")
surv_90 <- list()
for (z in c("Up")){
surv_tb <- tibble()
for (i in cancer_names){
v1 <- c()
for(j in variables){
v1 <- c(v1,surv_count(z,i,j,0.1))
}
surv_tb <- rbind(surv_tb,v1)
}
colnames(surv_tb) <- variables
rownames(surv_tb) <- cancer_names
surv_95[[z]] <- surv_tb
}
for (i in cancer_names[15:22]){
v1 <- c()
for(j in variables){
v1 <- c(v1,surv_count("Up",i,j,0.1))
}
surv_tb <- rbind(surv_tb,v1)
}
colnames(surv_tb) <- variables
rownames(surv_tb) <- cancer_names[c(1:13,15:22)]
surv_90[["Up"]] <- surv_tb
for (z in c("Down")){
surv_tb <- tibble()
for (i in cancer_names){
v1 <- c()
for(j in variables){
v1 <- c(v1,surv_count(z,i,j,0.1))
}
surv_tb <- rbind(surv_tb,v1)
}
colnames(surv_tb) <- variables
rownames(surv_tb) <- cancer_names
surv_95[[z]] <- surv_tb
}
for (i in cancer_names[15:22]){
v1 <- c()
for(j in variables){
v1 <- c(v1,surv_count("Down",i,j,0.1))
}
surv_tb <- rbind(surv_tb,v1)
}
colnames(surv_tb) <- variables
surv_90[["Down"]] <- surv_tb
View(surv_90[["Up"]])
View(surv_90[["Down"]])
View(surv_90[["Up"]])
write.csv2(surv_90[["Down"]],file="surv_down_90.csv")
write.csv2(surv_90[["Up"]],file="surv_up_90.csv")
View(surv_90[["Down"]])
rownames(surv_90[["Down"]])<- cancer_names[c(1:13,15:22)]
View(surv_90[["Down"]])
write.csv2(surv_90[["Down"]],file="surv_down_90.csv")
